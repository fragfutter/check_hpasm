package HP::Proliant::Component::DiskSubsystem::Da::SNMP;
our @ISA = qw(HP::Proliant::Component::DiskSubsystem::Da
    HP::Proliant::Component::SNMP);

use strict;
use constant { OK => 0, WARNING => 1, CRITICAL => 2, UNKNOWN => 3 };

sub new {
  my $class = shift;
  my %params = @_;
  my $self = { 
    controllers => [],
    accelerators => [],
    enclosures => [],
    physical_drives => [],
    logical_drives => [],
    spare_drives => [],
    blacklisted => 0,
  };
  bless $self, $class;
  return $self;
}

sub init {
  my $self = shift;
  my $snmpwalk = $self->{rawdata};

  # CPQIDA-MIB
  my $oids = {
    cpqDaCntlrEntry => "1.3.6.1.4.1.232.3.2.2.1.1",
    cpqDaCntlrIndex => "1.3.6.1.4.1.232.3.2.2.1.1.1",
    cpqDaCntlrModel => "1.3.6.1.4.1.232.3.2.2.1.1.2",
    cpqDaCntlrSlot => "1.3.6.1.4.1.232.3.2.2.1.1.5",
    cpqDaCntlrCondition => "1.3.6.1.4.1.232.3.2.2.1.1.6",
    cpqDaCntlrBoardCondition => "1.3.6.1.4.1.232.3.2.2.1.1.12",
    cpqDaCntlrModelValue => {
        1 => 'other',
        2 => 'ida',
        3 => 'idaExpansion',
        4 => 'ida-2',
        5 => 'smart',
        6 => 'smart-2e',
        7 => 'smart-2p',
        8 => 'smart-2sl',
        9 => 'smart-3100es',
        10 => 'smart-3200',
        11 => 'smart-2dh',
        12 => 'smart-221',
        13 => 'sa-4250es',
        14 => 'sa-4200',
        15 => 'sa-integrated',
        16 => 'sa-431',
        17 => 'sa-5300',
        18 => 'raidLc2',
        19 => 'sa-5i',
        20 => 'sa-532',
        21 => 'sa-5312',
        22 => 'sa-641',
        23 => 'sa-642',
        24 => 'sa-6400',
        25 => 'sa-6400em',
        26 => 'sa-6i',
        27 => 'sa-generic',
        29 => 'sa-p600',
        30 => 'sa-p400',
        31 => 'sa-e200',
        32 => 'sa-e200i',
        33 => 'sa-p400i',
        34 => 'sa-p800',
        35 => 'sa-e500',
        36 => 'sa-p700m',
        37 => 'sa-p212',
        38 => 'sa-p410',
        39 => 'sa-p410i',
        40 => 'sa-p411',
        41 => 'sa-b110i',
        42 => 'sa-p712m',
        43 => 'sa-p711m',
        44 => 'sa-p812',
        45 => 'sw-1210m',
        46 => 'sa-p220i',
        47 => 'sa-p222',
        48 => 'sa-p420',
        49 => 'sa-p420i',
        50 => 'sa-p421',
        51 => 'sa-b320i',
        52 => 'sa-p822',
        53 => 'sa-p721m',
        54 => 'sa-b120i',
        55 => 'hps-1224',
        56 => 'hps-1228',
        57 => 'hps-1228m',
        58 => 'sa-p822se',
        59 => 'hps-1224e',
        60 => 'hps-1228e',
        61 => 'hps-1228em',
        62 => 'sa-p230i',
        63 => 'sa-p430i',
        64 => 'sa-p430',
        65 => 'sa-p431',
        66 => 'sa-p731m',
        67 => 'sa-p830i',
        68 => 'sa-p830',
        69 => 'sa-p831',
        70 => 'sa-p530',
        71 => 'sa-p531',
        72 => 'sa-p244br',
        73 => 'sa-p246br',
        74 => 'sa-p440',
        75 => 'sa-p440ar',
        76 => 'sa-p441',
        76 => 'sa-p441',
        77 => 'sa-p741m',
        78 => 'sa-p840',
        79 => 'sa-p841',
        80 => 'sh-h240ar',
        81 => 'sh-h244br',
        82 => 'sh-h240',
        83 => 'sh-h241',
        84 => 'sa-b140i',
        85 => 'sh-generic',
        86 => 'sa-p240nr',
        87 => 'sh-h240nr',
        88 => 'sa-p840ar',
        89 => 'sa-p542d',
        90 => 's100i',
        91 => 'e208i-p',
        92 => 'e208i-a',
        93 => 'e208i-c',
        94 => 'e208e-p',
        95 => 'p204i-b',
        96 => 'p204i-c',
        97 => 'p408i-p',
        98 => 'p408i-a',
        99 => 'p408e-p',
        100 => 'p408i-c',
        101 => 'p408e-m',
        102 => 'p416ie-m',
        103 => 'p816i-a',
        104 => 'p408i-sb',
    },
    cpqDaCntlrConditionValue => {
        1 => "other",
        2 => "ok",
        3 => "degraded",
        4 => "failed",
    },
    cpqDaCntlrBoardConditionValue => {
        1 => "other",
        2 => "ok",
        3 => "degraded",
        4 => "failed",
    },
  };

  # INDEX { cpqDaCntlrIndex }
  foreach ($self->get_entries($oids, 'cpqDaCntlrEntry')) {
    push(@{$self->{controllers}},
        HP::Proliant::Component::DiskSubsystem::Da::Controller->new(%{$_}));
  }

  $oids = {
      cpqDaAccelEntry => "1.3.6.1.4.1.232.3.2.2.2.1",
      cpqDaAccelCntlrIndex => "1.3.6.1.4.1.232.3.2.2.2.1.1",
      cpqDaAccelStatus => "1.3.6.1.4.1.232.3.2.2.2.1.2",
      cpqDaAccelErrCode  => "1.3.6.1.4.1.232.3.2.2.2.1.5",
      cpqDaAccelBattery  => "1.3.6.1.4.1.232.3.2.2.2.1.6",
      cpqDaAccelCondition  => "1.3.6.1.4.1.232.3.2.2.2.1.9",
      cpqDaAccelBatteryValue => {
          1 => 'other',
          2 => 'ok',
          3 => 'recharging',
          4 => 'failed',
          5 => 'degraded',
          6 => 'notPresent',
          7 => 'capacitorFailed',
      },
      cpqDaAccelConditionValue => {
          1 => "other",
          2 => "ok",
          3 => "degraded",
          4 => "failed",
      },
      cpqDaAccelStatusValue => {
          1 => "other",
          2 => "invalid",
          3 => "enabled",
          4 => "tmpDisabled",
          5 => "permDisabled",
          6 => "cacheModFlashMemNotAttached",
          7 => "cacheModDegradedFailsafeSpeed",
          8 => "cacheModCriticalFailure",
          9 => "cacheReadCacheNotMapped",
      },
      cpqDaAccelErrCodeValue => {
          1 => 'other',
          2 => 'invalid',
          3 => 'badConfig',
          4 => 'lowBattery',
          5 => 'disableCmd',
          6 => 'noResources',
          7 => 'notConnected',
          8 => 'badMirrorData',
          9 => 'readErr',
          10 => 'writeErr',
          11 => 'configCmd',
          12 => 'expandInProgress',
          13 => 'snapshotInProgress',
          14 => 'redundantLowBattery',
          15 => 'redundantSizeMismatch',
          16 => 'redundantCacheFailure',
          17 => 'excessiveEccErrors',
          18 => 'adgEnablerMissing',
          19 => 'postEccErrors',
          20 => 'batteryHotRemoved',
          21 => 'capacitorChargeLow',
          22 => 'notEnoughBatteries',
          23 => 'cacheModuleNotSupported',
          24 => 'batteryNotSupported',
          25 => 'noCapacitorAttached',
          26 => 'capBasedBackupFailed',
          27 => 'capBasedRestoreFailed',
          28 => 'capBasedModuleHWFailure',
          29 => 'capacitorFailedToCharge',
          30 => 'capacitorBasedHWMemBeingErased',
          31 => 'incompatibleCacheModule',
          32 => 'fbcmChargerCircuitFailure',
          33 => 'cbPowerSourceCableError',
      },
  };
    
  # INDEX { cpqDaAccelCntlrIndex }
  foreach ($self->get_entries($oids, 'cpqDaAccelEntry')) {
    push(@{$self->{accelerators}},
        HP::Proliant::Component::DiskSubsystem::Da::Accelerator->new(%{$_}));
  }

  $oids = {
      cpqDaLogDrvEntry => "1.3.6.1.4.1.232.3.2.3.1.1",
      cpqDaLogDrvCntlrIndex => "1.3.6.1.4.1.232.3.2.3.1.1.1",
      cpqDaLogDrvIndex => "1.3.6.1.4.1.232.3.2.3.1.1.2",
      cpqDaLogDrvFaultTol => "1.3.6.1.4.1.232.3.2.3.1.1.3",
      cpqDaLogDrvStatus => "1.3.6.1.4.1.232.3.2.3.1.1.4",
      cpqDaLogDrvSize => "1.3.6.1.4.1.232.3.2.3.1.1.9",
      cpqDaLogDrvPhyDrvIDs => "1.3.6.1.4.1.232.3.2.3.1.1.10",
      cpqDaLogDrvCondition => "1.3.6.1.4.1.232.3.2.3.1.1.11",
      cpqDaLogDrvPercentRebuild => "1.3.6.1.4.1.232.3.2.3.1.1.12",
      cpqDaLogDrvFaultTolValue => {
          1 => "other",
          2 => "none",
          3 => "mirroring",
          4 => "dataGuard",
          5 => "distribDataGuard",
          7 => "advancedDataGuard",
          8 => "raid50",
          9 => "raid60",
          10 => "raid1Adm",
          11 => "raid10Adm",
          12 => "raid10",
      },
      cpqDaLogDrvConditionValue => {
          1 => "other",
          2 => "ok",
          3 => "degraded",
          4 => "failed",
      },
      cpqDaLogDrvStatusValue => {
          1 => "other",
          2 => "ok",
          3 => "failed",
          4 => "unconfigured",
          5 => "recovering",
          6 => "readyForRebuild",
          7 => "rebuilding",
          8 => "wrongDrive",
          9 => "badConnect",
          10 => "overheating",
          11 => "shutdown",
          12 => "expanding",
          13 => "notAvailable",
          14 => "queuedForExpansion",
          15 => "multipathAccessDegraded",
          16 => "erasing",
          17 => "predictiveSpareRebuildReady",
          18 => "rapidParityInitInProgress",
          19 => "rapidParityInitPending",
          20 => "noAccessEncryptedNoCntlrKey",
          21 => "unencryptedToEncryptedInProgress",
          22 => "newLogDrvKeyRekeyInProgress",
          23 => "noAccessEncryptedCntlrEncryptnNotEnbld",
          24 => "unencryptedToEncryptedNotStarted",
          25 => "newLogDrvKeyRekeyRequestReceived",
          26 => "unsupported",
          27 => "offline",
          28 => "sedQualInProgrss",
          29 => "sedQualFailed",
      },
  };

  # INDEX { cpqDaLogDrvCntlrIndex, cpqDaLogDrvIndex }
  foreach ($self->get_entries($oids, 'cpqDaLogDrvEntry')) {
    $_->{cpqDaLogDrvPhyDrvIDs} ||= 'empty';
    push(@{$self->{logical_drives}},
        HP::Proliant::Component::DiskSubsystem::Da::LogicalDrive->new(%{$_}));
  }

  $oids = {
      cpqDaPhyDrvEntry => "1.3.6.1.4.1.232.3.2.5.1.1",
      cpqDaPhyDrvCntlrIndex => "1.3.6.1.4.1.232.3.2.5.1.1.1",
      cpqDaPhyDrvIndex => "1.3.6.1.4.1.232.3.2.5.1.1.2",
      cpqDaPhyDrvBay => "1.3.6.1.4.1.232.3.2.5.1.1.5",
      cpqDaPhyDrvStatus => "1.3.6.1.4.1.232.3.2.5.1.1.6",
      cpqDaPhyDrvSize => "1.3.6.1.4.1.232.3.2.5.1.1.9",
      cpqDaPhyDrvCondition => "1.3.6.1.4.1.232.3.2.5.1.1.37",
      cpqDaPhyDrvBusNumber => "1.3.6.1.4.1.232.3.2.5.1.1.50",
      cpqDaPhyDrvConditionValue => {
          1 => "other",
          2 => "ok",
          3 => "degraded",
          4 => "failed",
      },
      cpqDaPhyDrvStatusValue => {
          1 => "other",
          2 => "ok",
          3 => "failed",
          4 => "predictiveFailure",
          5 => "erasing",
          6 => "eraseDone",
          7 => "eraseQueued",
          8 => "ssdWearOut",
          9 => "notAuthenticated",
          10 => "hotspare",
      },
      cpqDaPhyDrvSmartStatus => "1.3.6.1.4.1.232.3.2.5.1.1.57",
      cpqDaPhyDrvSmartStatusValue => {
          1 => "other",
          2 => "ok",
          3 => "replaceDrive",
          4 => "replaceDriveSSDWearOut",
      },
  };

  # INDEX { cpqDaPhyDrvCntlrIndex, cpqDaPhyDrvIndex }
  foreach ($self->get_entries($oids, 'cpqDaPhyDrvEntry')) {
    push(@{$self->{physical_drives}},
        HP::Proliant::Component::DiskSubsystem::Da::PhysicalDrive->new(%{$_}));
  }

}
